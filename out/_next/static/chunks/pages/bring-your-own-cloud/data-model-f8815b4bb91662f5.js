(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3834],{79666:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/bring-your-own-cloud/data-model",function(){return s(62280)}])},62280:function(n,e,s){"use strict";s.r(e),s.d(e,{useTOC:function(){return t}});var r=s(85893),i=s(37812),a=s(84854),l=s(79299);function t(n){return[]}e.default=(0,i.c)(function(n){let e={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",span:"span",ul:"ul",...(0,l.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{children:"Data Model"}),"\n",(0,r.jsx)(e.p,{children:"RunReveal’s data model is simple and allows for bring your own database\ncustomers to extend the tables that RunReveal provides to create things\nlike:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Custom views for internal or custom log sources."}),"\n",(0,r.jsx)(e.li,{children:"Custom schemas to perform enrichment or normalization across"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"All logs that RunReveal receives we normalize into a consistent schema. This\nschema is built to be flexible and extensible."}),"\n",(0,r.jsx)(e.h1,{children:"What’s in a log?"}),"\n",(0,r.jsxs)(e.p,{children:["The complete log schema is available here below. This is accessible in the\nproduct by running ",(0,r.jsx)(e.code,{children:"describe logs"})," as a query."]}),"\n",(0,r.jsx)(e.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,r.jsxs)(e.code,{children:[(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"$ describe logs"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"workspaceID          String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"sourceID             String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"sourceType           LowCardinality(String)"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"sourceTTL            UInt32"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"receivedAt           DateTime"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"id                   String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"eventTime            DateTime"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"eventName            String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"eventID              String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcIP                String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcASCountryCode     String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcASNumber          UInt32"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcASOrganization    String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcCity              String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcConnectionType    String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcISP               String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcLatitude          Float64"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcLongitude         Float64"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"srcUserType          String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstIP                String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstASCountryCode     String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstASNumber          UInt32"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstASOrganization    String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstCity              String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstConnectionType    String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstISP               String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstLatitude          Float64"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstLongitude         Float64"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"dstUserType          String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"actor                Map(String, String)"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"tags                 Map(String, String)"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"resources            Array(String)"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"serviceName          String"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"enrichments          Array(Tuple(data Map(String, String), name String, provider String, type String, value String))"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"readOnly             Bool"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"rawLog               String"})})]})}),"\n",(0,r.jsx)(e.p,{children:"There are a lot of important fields and nuances to this schema that is worth\ncovering. Some of the important bits are"}),"\n",(0,r.jsx)(e.h1,{children:(0,r.jsx)(e.code,{children:"rawLog"})}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"rawLog"})," column contains the raw JSON (or otherwise) as a string. This is\nan incredibly useful column because it allows us to build views, materialized\nviews, or otherwise on top of the logs table for custom use cases."]}),"\n",(0,r.jsx)(e.p,{children:"The other columns are populated by each of our sources as soon as the logs\nare ingested. When a log arrives at a source the following steps occur."}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"The log is parsed into a structured object."}),"\n",(0,r.jsx)(e.li,{children:"The relevant fields are pulled out of the log and filled into a normalized log"}),"\n",(0,r.jsxs)(e.li,{children:["The normalized log contains a ",(0,r.jsx)(e.code,{children:"rawLog"})," field, which is set with the original log line that was parsed."]}),"\n",(0,r.jsx)(e.li,{children:"The normalized log performs automatic enrichments (srcASCountryCode, dstISP, etc)."}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"By default all of our log sources will automatically do this (except for\ngeneric log sources). Additionally, however, our transforms feature can be used\nto move data around further within our normalized schema, or the rawLog fields."}),"\n",(0,r.jsx)(e.h1,{children:"Building new views"}),"\n",(0,r.jsxs)(e.p,{children:["Within your database it’s possible to build custom views that extend logs within\nRunReveal. Here’s the most simple example of creating a new view called ",(0,r.jsx)(e.code,{children:"co_example_logs"}),"\nwith a new column called ",(0,r.jsx)(e.code,{children:"extra_field"})]}),"\n",(0,r.jsx)(e.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,r.jsxs)(e.code,{children:[(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"CREATE OR REPLACE VIEW runreveal.co_example_logs AS"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"    SELECT"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"        *,"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"        JSONExtractString(rawLog, 'extra_field') as `extra_field`"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"    FROM runreveal.logs"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:"    WHERE sourceID = '2z3ykgYgk5fats6m2S9iKrVqbFk'"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{children:";"})}),"\n",(0,r.jsx)(e.span,{children:(0,r.jsx)(e.span,{})})]})}),"\n",(0,r.jsxs)(e.p,{children:["One thing to note, that’s implicit in ",(0,r.jsx)(e.code,{children:"select * from logs"})," is that\nit’s critical to include the ",(0,r.jsx)(e.code,{children:"receivedAt"})," column in tables and views."]}),"\n",(0,r.jsxs)(e.p,{children:["We highly recommend that all your tables include this column because\nit’s one of our most important indexes on the table. This will ensure\nthat your queries remain quick. It’s also the way our UI partitions\nand loads data by time. To make sure that a table or view is compatible\nwith our UI it’s required to have the ",(0,r.jsx)(e.code,{children:"receivedAt"})," column."]}),"\n",(0,r.jsx)(e.h1,{children:"Other tables"}),"\n",(0,r.jsx)(e.p,{children:"There are other important tables to make note of in RunReveal."}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"detections"})," - Holds all findings from sigma and query based detections"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"scheduled_query_runs"})," - Information on scheduled query. Shows runs and results."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"runreveal_source_volumes"})," - Counts of how much data was received."]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["Each of these tables can also be extended, but many of them will have different\nprimary keys and indexes. If you’re curious about the details you can ",(0,r.jsx)(e.code,{children:"describe"}),"\neach one of these and examine how they work!"]})]})},"/bring-your-own-cloud/data-model",{filePath:"pages/bring-your-own-cloud/data-model.mdx",timestamp:1750975332e3,pageMap:a.v,frontMatter:{title:"Data Model",description:"Understand RunReveal's data model and log schema. Learn about normalized fields, rawLog storage, and creating custom views for your security data."},title:"Data Model"},"undefined"==typeof RemoteContent?t:RemoteContent.useTOC)}},function(n){n.O(0,[7812,4854,2888,9774,179],function(){return n(n.s=79666)}),_N_E=n.O()}]);