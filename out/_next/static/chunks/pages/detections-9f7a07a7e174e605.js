(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5858],{36021:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/detections",function(){return r(80356)}])},80356:function(e,n,r){"use strict";r.r(n),r.d(n,{useTOC:function(){return c}});var t=r(85893),i=r(37812),s=r(84854),d=r(79299);function c(e){let n={code:"code",...(0,d.a)()};return[{value:(0,t.jsxs)(t.Fragment,{children:["Utilizing ",(0,t.jsx)(n.code,{children:"scheduled_query_runs"})]}),id:"utilizing-scheduled_query_runs",depth:2},{value:(0,t.jsxs)(t.Fragment,{children:["Utilizing ",(0,t.jsx)(n.code,{children:"detections"})]}),id:"utilizing-detections",depth:2},{value:"Detection Data Model",id:"detection-data-model",depth:2}]}n.default=(0,i.c)(function(e){let{toc:n=c(e)}=e,r={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",span:"span",ul:"ul",...(0,d.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{children:"Detections"}),"\n",(0,t.jsx)(r.p,{children:"Detections currently are queries that execute on a schedule and their results\nof all queries that are run are saved to our underlying database. You can view\nthe historic detection queries that have run on the RunReveal platform by\nsearching several underlying tables."}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"scheduled_query_runs"})," - The results of all scheduled query runs, their\nexecution times, the number of rows they returned, and parameter values\nthat were passed to them."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"detections"})," - The rows that your detection queries return. These results\ncontain the metadata of the associated detection, like risk score, mitre\nattacks, etc."]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:n[0].id,children:n[0].value}),"\n",(0,t.jsx)(r.p,{children:"If you are curious if a query of yours is executing, failing, erroring, or\nyour parameters are being passed correctly, the scheduled_query_runs table\nis exceptionally helpful."}),"\n",(0,t.jsx)(r.p,{children:"For example, here’s a way to look for errors that have occurred while\nexecuting in a detection called ‘ExampleQuery’."}),"\n",(0,t.jsx)(r.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,t.jsxs)(r.code,{children:[(0,t.jsx)(r.span,{children:(0,t.jsx)(r.span,{children:"select *"})}),"\n",(0,t.jsx)(r.span,{children:(0,t.jsx)(r.span,{children:"from scheduled_query_runs"})}),"\n",(0,t.jsx)(r.span,{children:(0,t.jsx)(r.span,{children:"where queryName='ExampleQuery' and error!='' and executionTime > now() - interval '1 day'"})})]})}),"\n",(0,t.jsx)(r.h2,{id:n[1].id,children:n[1].value}),"\n",(0,t.jsx)(r.p,{children:"The detections table is further subdivided into two views (that you can\ninteract) with like a tables."}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"signals"})," - Detection queries that ran with the purpose of collecting data\nand have no notification channel configured."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"alerts"})," - Detection queries that ran and alerted one of your notification\nchannels."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"The detections table contains a row for each individual row returned by your\nquery. Fields returned by your query that match the column names of our defined\nschema are saved directly into those columns in the detection table."}),"\n",(0,t.jsx)(r.p,{children:"There is a limit of 100 rows that  acn be saved with the detection table. If\nyou need to exceed this limit for whatever reason, please contact us."}),"\n",(0,t.jsx)(r.h2,{id:n[2].id,children:n[2].value}),"\n",(0,t.jsxs)(r.p,{children:["The results of your detection queries are saved to the ",(0,t.jsx)(r.code,{children:"detections"})," table. The\ndetections table contains several fields, along with their types."]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"id"})," - ",(0,t.jsx)(r.code,{children:"String"})," - Unique identified of the run"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"scheduledRunID"})," - ",(0,t.jsx)(r.code,{children:"String"})," - The unique identifier of the scheduled query run"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"workspaceID"})," - ",(0,t.jsx)(r.code,{children:"String"})," - Your workspace ID"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"detectionID"})," - ",(0,t.jsx)(r.code,{children:"String"})," - The identified of the detection"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"detectionName"})," - ",(0,t.jsx)(r.code,{children:"String"})," - The name of the detection"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"recordsReturned"})," - ",(0,t.jsx)(r.code,{children:"Int32"})," - The number of rows returned by the query"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"runTime"})," - ",(0,t.jsx)(r.code,{children:"Int64"})," - The number of nanoseconds the query took to run"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"query"})," - ",(0,t.jsx)(r.code,{children:"String"})," - The actual query that was run for the scheduled query"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"params"})," - ",(0,t.jsx)(r.code,{children:"Map(String, String)"})," - The supplied parameters to the scheduled query"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"columnNames"})," - ",(0,t.jsx)(r.code,{children:"Array(String)"})," - An ordered array of column names returned by the query"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"columnTypes"})," - ",(0,t.jsx)(r.code,{children:"Array(String)"})," - An ordered array of the column types returned by the query"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"results"})," - ",(0,t.jsx)(r.code,{children:"String"})," - An array of the first 100 returned values from the query"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"severity"})," - ",(0,t.jsx)(r.code,{children:"String"})," - A string representing the severity of the alert"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"actor"})," - ",(0,t.jsx)(r.code,{children:"Map(String, String)"})," - Details about the user that ran the query"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"resources"})," - ",(0,t.jsx)(r.code,{children:"Array(String)"})," DEFAULT [] - Details about the resources returned from the query"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"srcIP"})," - ",(0,t.jsx)(r.code,{children:"String"})," - Details about the srcIP in the log entries"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"dstIP"})," - ",(0,t.jsx)(r.code,{children:"String"})," - Details about the dstIPs from the log entries"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"notificationNames"})," - ",(0,t.jsx)(r.code,{children:"Array(String)"})," - The names of the notification channels"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"categories"})," - ",(0,t.jsx)(r.code,{children:"Array(String)"})," DEFAULT [] - The categories that the query belongs to"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"mitreAttacks"})," - ",(0,t.jsx)(r.code,{children:"Array(LowCardinality(String))"})," DEFAULT [] - The MITRE ATT&CK technique categories that the query belongs to"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"These tables can be accessed like any other table in RunReveal"}),"\n",(0,t.jsx)(r.p,{children:"To query the detection table:"}),"\n",(0,t.jsx)(r.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,t.jsx)(r.code,{children:(0,t.jsx)(r.span,{children:(0,t.jsx)(r.span,{children:"select * from detections"})})})}),"\n",(0,t.jsx)(r.p,{children:"To query the signals view:"}),"\n",(0,t.jsx)(r.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,t.jsx)(r.code,{children:(0,t.jsx)(r.span,{children:(0,t.jsx)(r.span,{children:"select * from signals"})})})}),"\n",(0,t.jsx)(r.p,{children:"To query the alerts view:"}),"\n",(0,t.jsx)(r.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,t.jsx)(r.code,{children:(0,t.jsx)(r.span,{children:(0,t.jsx)(r.span,{children:"select * from alerts"})})})})]})},"/detections",{filePath:"pages/detections.mdx",timestamp:1718739875e3,pageMap:s.v,frontMatter:{title:"Detections - Scheduled Security Queries & Alert Management",description:"Learn how RunReveal detections work as scheduled queries that execute and save results to the database. Understand the detection data model, signals vs alerts, and querying detection history."},title:"Detections - Scheduled Security Queries & Alert Management"},"undefined"==typeof RemoteContent?c:RemoteContent.useTOC)}},function(e){e.O(0,[7812,4854,2888,9774,179],function(){return e(e.s=36021)}),_N_E=e.O()}]);