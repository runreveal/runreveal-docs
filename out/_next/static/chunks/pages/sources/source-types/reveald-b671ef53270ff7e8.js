(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6127],{60771:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/sources/source-types/reveald",function(){return s(69318)}])},69318:function(n,e,s){"use strict";s.r(e),s.d(e,{useTOC:function(){return c}});var i=s(85893),r=s(37812),a=s(84854),l=s(79299);function c(n){return[]}e.default=(0,r.c)(function(n){let e={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",span:"span",ul:"ul",...(0,l.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{children:"reveald log collection"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:"https://github.com/runreveal/reveald",children:"Reveald"})," is an open source log collection\nagent that is efficient, performant and simple."]}),"\n",(0,i.jsx)(e.p,{children:"Reveald supports a variety of host-level log sources and is appropriate to use\nin any situation where the logs aren’t already being collected to an S3 bucket\nor accessible via another first-party API."}),"\n",(0,i.jsx)(e.p,{children:"To get your logs into RunReveal via reveald, we’ll first create a reveald source\nin the RunReveal UI, which will give us a webhookURL to use as the target to\nsend our logs to from reveald."}),"\n",(0,i.jsx)("img",{src:"/kawa-1.png"}),"\n",(0,i.jsxs)(e.p,{children:["Next, download a reveald release for the operating system and architecture of\nthe host you’ll be running the daemon on from the ",(0,i.jsx)(e.a,{href:"https://github.com/runreveal/reveald/releases",children:"releases page on\ngithub"}),".  Extract the package to\na directory of your choosing."]}),"\n",(0,i.jsx)(e.p,{children:"As of this writing, reveald supports the following sources:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"journald"}),"\n",(0,i.jsx)(e.li,{children:"file"}),"\n",(0,i.jsx)(e.li,{children:"command"}),"\n",(0,i.jsx)(e.li,{children:"syslog"}),"\n",(0,i.jsx)(e.li,{children:"command"}),"\n",(0,i.jsx)(e.li,{children:"mqtt"}),"\n",(0,i.jsx)(e.li,{children:"nginx access logs (via syslog)"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"And the following destinations:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"runreveal"}),"\n",(0,i.jsx)(e.li,{children:"s3"}),"\n",(0,i.jsx)(e.li,{children:"printer"}),"\n",(0,i.jsx)(e.li,{children:"mqtt"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"You can see examples of how to configure reveald for each of these sources in\nthe example config file provided in the repository’s examples directory, or an\nabridged example config below."}),"\n",(0,i.jsxs)(e.p,{children:["Replace ",(0,i.jsx)(e.code,{children:"{{YOUR-REVEALD-WEBHOOKURL}}"})," with the webhook given in the UI."]}),"\n",(0,i.jsx)(e.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,i.jsxs)(e.code,{children:[(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"{"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"  // this is an example config file for kawa"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"  // it is parsed using hujson so you can use comments and trailing commas, but"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"  // is otherwise identical to JSON"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'  "sources": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    // The keys here are the identifiers for the sources, and are used to"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    // refernece them when logging or in metrics."})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    "kubernetes": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "type": "file",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "path": "/var/log/pods/",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "extension": ".log",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    "hostlogs": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "type": "file",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "path": "/var/log/mylogs/",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "extension": ".log",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    "myjournald": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "type": "journald",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    "cmdexample": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // The comand source type allows you to run a command and collect its"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // output as logs. This is useful for running custom scripts or commands"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // that output logs to stdout."})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "type": "command",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "cmd": "/bin/date",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "args": ["+%Y-%m-%dT%H:%M:%S%z"],'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // inheritEnv allows you to pass the environment of the reveald process"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // to the command being run.  Defaults to false."})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "inheritEnv": false,'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // env allows you to set environment variables for the command being run."})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // if inheritEnv is set, any keys this json object override the"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // inherited environment of the reveald process."})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "env": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'        "TZ": "Asia/Taipei",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // interval is the time between runs of the command, the polling"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // frequency. Defaults to 5s. Whatever this is set to, the command"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // being run will also have a deadline to complete before the"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // next run, or be killled with an error returned to reveald."})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "interval": "5s",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    // "mynginx": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    //   "type": "nginx_syslog",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    //   "addr": "0.0.0.0:5514",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    // },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"  },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'  "destinations": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    "webhook": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "type": "runreveal",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // Replace this webhook URL with your own, created on https://www.runreveal.com"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      // as a "Reveald" type source'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "webhookURL": "https://example.runreveal.com/sources/kawa/webhook/0123456789",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // You can also use environment variables by referencing them with a"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // dollar sign. The value must be quoted, start with a dollar sign and be"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // a valid environment variable name"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      // "webhookURL": "$WEBHOOK_URL",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'    "blobstore": {'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "type": "s3",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // bucketName is required"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "bucketName": "our-s3-archive",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // bucketRegion is required"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "bucketRegion": "us-west-2",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // pathPrefix is optional and default unset"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "pathPrefix": "logs/",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // accessKeyID is required if not present in the environment as"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // AWS_ACCESS_KEY_ID. If running on AWS, reveald can also be authenticated"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // at the ec2 host/pod level using IAM roles."})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "accessKeyID": "AKIAIOS...",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // secretAccessKey is required if not present in the environment as"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // AWS_SECRET_ACCESS_KEY"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "secretAccessKey": "SECRET",'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"      // batchSize is optional"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:'      "batchSize": 100000,'})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"    },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"  },"})}),"\n",(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"}"})})]})}),"\n",(0,i.jsx)(e.p,{children:"This is a valid config file if you’re running on Linux.  We can run reveald\npointing at the configuration like so (assuming you download it to the same\ndirectory as the binary)."}),"\n",(0,i.jsx)(e.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,i.jsx)(e.code,{children:(0,i.jsx)(e.span,{children:(0,i.jsx)(e.span,{children:"./reveald run --config=./config.json"})})})}),"\n",(0,i.jsx)(e.p,{children:"If configured correctly, you should start seeing the journald logs and kubelet\npod logs (if the host is running a kubelet) in your RunReveal workspace."}),"\n",(0,i.jsx)(e.p,{children:"If running inside kubernetes, you can configure this binary to run as a\ndaemonset with the given config file as a configmap mounted somewhere inside\nthe pod, and the given log directories shared from the host to the pod."})]})},"/sources/source-types/reveald",{filePath:"pages/sources/source-types/reveald.mdx",timestamp:1727302354e3,pageMap:a.v,frontMatter:{title:"Reveald Log Collection",description:"Deploy Reveald log collection agent for efficient host-level log ingestion. Support multiple sources and destinations for comprehensive log collection and forwarding."},title:"Reveald Log Collection"},"undefined"==typeof RemoteContent?c:RemoteContent.useTOC)}},function(n){n.O(0,[7812,4854,2888,9774,179],function(){return n(n.s=60771)}),_N_E=n.O()}]);